name: Deploy Backend

on:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - "server/**"
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Write server.key from secret
        run: |
          mkdir -p ./server
          echo "${{ secrets.SERVER_PKEY }}" > ./backend/server.key
          chmod 600 ./backend/server.key

      - name: Copy files to EC2 with scp
        uses: appleboy/scp-action@v1
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "./backend/"
          target: "/home/${{ vars.EC2_USER }}/snapcore-server/"
          rm: true

      - name: Run remote commands on EC2 and Configure Nginx
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            API_DOMAIN="${{ vars.API_DOMAIN }}"
            CERTBOT_EMAIL="${{ secrets.CERTBOT_EMAIL }}"
            APP_DIR="/home/${{ vars.EC2_USER }}/snapcore-server/backend"
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"
            echo "--- Deploying to EC2: $(pwd) ---"

            # Install NVM and Node.js 22.13.0
            export NVM_DIR="$HOME/.nvm"
            if [ ! -d "$NVM_DIR" ]; then
              echo "Installing NVM..."
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            fi
            source "$NVM_DIR/nvm.sh"

            if ! node -v | grep -q "v22.13.0"; then
              echo "Installing Node.js v22.13.0..."
              nvm install 22.13.0
              nvm alias default 22.13.0
              nvm use 22.13.0
            fi

            # Ensure PM2 is installed
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              npm install -g pm2
            fi

            # --- MONGODB USER SETUP ---
            echo "--- Setting up MongoDB user ---"
            
            # Check if MongoDB is running
            if ! systemctl is-active --quiet mongod; then
              echo "Starting MongoDB..."
              sudo systemctl start mongod
              sudo systemctl enable mongod
              sleep 3
            fi

            # Create MongoDB user if it doesn't exist
            echo "Checking if MongoDB user exists..."
            USER_EXISTS=$(mongosh --quiet --eval "
              try {
                db.getSiblingDB('SnapCore').auth('${{ secrets.MONGO_USERNAME }}', '${{ secrets.MONGO_PASSWORD }}');
                print('USER_EXISTS');
              } catch(e) {
                print('USER_NOT_EXISTS');
              }
            " 2>/dev/null | grep -o "USER_EXISTS\|USER_NOT_EXISTS" || echo "USER_NOT_EXISTS")

            if [ "$USER_EXISTS" = "USER_NOT_EXISTS" ]; then
              echo "Creating MongoDB user: ${{ secrets.MONGO_USERNAME }}"
              
              # First, create an admin user if none exists
              mongosh --quiet --eval "
                try {
                  use admin;
                  if (db.getUsers().length === 0) {
                    db.createUser({
                      user: 'admin',
                      pwd: '${{ secrets.MONGO_ADMIN_PASSWORD }}',
                      roles: ['root']
                    });
                    print('Admin user created');
                  } else {
                    print('Admin user already exists');
                  }
                } catch(e) {
                  print('Admin setup: ' + e.message);
                }
              " || echo "Admin user setup completed"

              # Create the application user
              mongosh --quiet --eval "
                try {
                  use SnapCore;
                  db.createUser({
                    user: '${{ secrets.MONGO_USERNAME }}',
                    pwd: '${{ secrets.MONGO_PASSWORD }}',
                    roles: [
                      { role: 'readWrite', db: 'SnapCore' }
                    ]
                  });
                  print('Application user created successfully');
                } catch(e) {
                  print('User creation error: ' + e.message);
                }
              " || echo "User creation completed"

              # Enable authentication in MongoDB config
              echo "Configuring MongoDB authentication..."
              if ! grep -q "^security:" /etc/mongod.conf; then
                echo "Adding security configuration to MongoDB..."
                echo "" | sudo tee -a /etc/mongod.conf > /dev/null
                echo "# Security configuration" | sudo tee -a /etc/mongod.conf > /dev/null
                echo "security:" | sudo tee -a /etc/mongod.conf > /dev/null
                echo "  authorization: enabled" | sudo tee -a /etc/mongod.conf > /dev/null
                echo "Restarting MongoDB to apply authentication..."
                sudo systemctl restart mongod
                sleep 5
              else
                echo "MongoDB authentication already configured"
              fi
            else
              echo "MongoDB user already exists, skipping creation"
            fi

            # Test the connection
            echo "Testing MongoDB connection..."
            TEST_CONNECTION=$(mongosh --quiet "mongodb://${{ secrets.MONGO_USERNAME }}:${{ secrets.MONGO_PASSWORD }}@localhost:27017/SnapCore?authSource=SnapCore" --eval "
              try {
                db.runCommand({ping: 1});
                print('CONNECTION_SUCCESS');
              } catch(e) {
                print('CONNECTION_FAILED: ' + e.message);
              }
            " 2>/dev/null | grep -o "CONNECTION_SUCCESS\|CONNECTION_FAILED.*" || echo "CONNECTION_FAILED")

            if [[ "$TEST_CONNECTION" == "CONNECTION_SUCCESS" ]]; then
              echo "MongoDB connection test successful"
            else
              echo "MongoDB connection test failed: $TEST_CONNECTION"
              echo "Continuing with deployment, but database issues may occur..."
            fi

            echo "Writing environment variables to .env..."
            cat <<EOF > "$APP_DIR/.env"
            NODE_ENV=production
            PORT=3000
            MONGO_URI=mongodb://${{ secrets.MONGO_USERNAME }}:${{ secrets.MONGO_PASSWORD }}@localhost:27017/SnapCore?authSource=SnapCore
            CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            REDIRECT_URI=https://snapcore.subspace.site
            TOKEN_ENDPOINT=https://oauth2.googleapis.com/token
            TOKEN_INFO=https://oauth2.googleapis.com/tokeninfo
            AUTH_ENDPOINT=https://accounts.google.com/o/oauth2/v2/auth
            USE_S3=true
            AWS_REGION=af-south-1
            S3_BUCKET=snapcore-social-media-assets
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            DYNAMODB_TABLE=accounts
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            SESSION_SECRET=${{ secrets.SESSION_SECRET }}
            KMS_ALIAS=alias/fediverse_private_key_encryption
            USERNAME_INDEX_NAME=UsernameIndex
            EOF

            # Install app dependencies
            echo "Installing app dependencies..."
            npm install

            # Build the app
            echo "Building the app..."
            npm run build

            # --- NGINX SETUP ---
            echo "--- Configuring Nginx ---"
            if ! command -v nginx &> /dev/null; then
              echo "Installing Nginx..."
              sudo yum install -y nginx
              sudo systemctl enable nginx
            fi

            echo "Configuring 'server_names_hash_bucket_size'..."
            if ! grep -q "server_names_hash_bucket_size" /etc/nginx/nginx.conf; then
              sudo sed -i '/http {/a \    server_names_hash_bucket_size 128;' /etc/nginx/nginx.conf
            else
              sudo sed -i 's/^\(\s*\)#\?\s*server_names_hash_bucket_size.*/\1server_names_hash_bucket_size 128;/' /etc/nginx/nginx.conf
            fi

            NGINX_CONF="/etc/nginx/conf.d/cb-api.conf"
            WEB_DOMAIN="${{ vars.WEB_DOMAIN }}"
            API_DOMAIN="${{ vars.API_DOMAIN }}"
            echo "Creating Nginx config file: $NGINX_CONF"
            sudo tee "$NGINX_CONF" > /dev/null <<EOF
            server {
                listen 80;
                listen [::]:80;
                server_name $API_DOMAIN;

                # serve static files from the frontend directory
                root /var/www/frontend;
                index index.html;

                # Proxy API requests to Node.js backend
                location /api {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
                
                location / {
                    try_files \$uri /index.html;
                }
            }
            EOF

            echo "Testing and restarting Nginx..."
            sudo nginx -t && sudo systemctl restart nginx || { echo "Nginx configuration failed!"; exit 1; }

            echo "Installing Certbot and requesting SSL certificate..."
            if ! command -v certbot &> /dev/null; then
              sudo yum install -y epel-release
              sudo yum install -y certbot python3-certbot-nginx
            fi

            sudo certbot --nginx --non-interactive --agree-tos --email "$CERTBOT_EMAIL" -d "$API_DOMAIN" -d "$WEB_DOMAIN"

            echo "Reloading Nginx with SSL..."
            sudo nginx -t && sudo systemctl reload nginx

            # Copy all files except src/, node_modules/, and dist
            echo "Copying runtime files to dist/ ..."
            mkdir -p dist
            rsync -av --exclude='src' --exclude='node_modules' --exclude='dist' ./ dist/

            # Start/restart snapcore-api with PM2
            echo "Starting/Restarting snapcore-api with PM2..."
            cd dist
            export NODE_ENV=production 
            if pm2 show snapcore-api &> /dev/null; then
              pm2 restart snapcore-api
            else
              pm2 start app.js --name snapcore-api
            fi
            pm2 save

            echo "Deployment complete."
